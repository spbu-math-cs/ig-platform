# A mock of the server for testing purposes
#
# Simulates the server responses to the client, but
# ignores the modifications made by the client.

import asyncio
import functools

import aiohttp
from aiohttp import web


async def create_game_session(request: web.Request) -> web.Response:
    data = await request.json()
    assert data["quiz"]["id"], 1

    return web.json_response({
        "quiz": {
            "id": "239",
        }
    })


clients: set[web.WebSocketResponse] = set()

BOARD = {"cells": [{
    "row": 0,
    "column": 0,
    "mark": "<span style=\"font-size: 60pt;\">üòà</span>",
    "questions": ["–û–ø–∏—à–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö —ç–º–æ–¥–∑–∏", "üî∞üò§üÜé"]
}, {
    "row": 0,
    "column": 1,
    "mark": "–Ø–∑—ã–∫–∏ I",
    "questions": ["–ù–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ –Ω–∞–ø–∏—Å–∞–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", "<pre>Say hello.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</pre>", "", "<img src=\"https://upload.wikimedia.org/wikipedia/commons/3/3c/Whitespace_in_vim2.png\"></img>"]
}, {
    "row": 0,
    "column": 2,
    "mark": "<div style=\"font-size: 5pt; line-height: 1.2;\">–ö–∞–∫–∞—è-—Ç–æ —Ä–∞–Ω–¥–æ–º–Ω–∞—è –¥–∏—á—å –∫–æ—Ç–æ—Ä–∞—è –ø–∞—Ä–∏—Ç —Ç–æ–ª—å–∫–æ –º–µ–Ω—è –¥–∞ –∏ —Ç–æ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º—É —á—Ç–æ —è –ø–æ—Å–º–æ—Ç—Ä–µ–ª –ø—Ä–æ –Ω–µ–µ –≤–∏–¥–æ—Å –Ω–∞ —é—Ç—É–±–µ –∏ —è —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ø—Ä–æ –Ω–µ–µ –∑–∞–±—É–¥—É —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–µ—Å—è—Ü–µ–≤ –Ω–æ —Å–µ–π—á–∞—Å –º–Ω–µ –∫–∞–∂–µ—Ç—Å—è —á—Ç–æ —ç—Ç–æ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –∏ —è —Ö–æ—á—É –¥–∞—Ç—å –Ω–∞ —ç—Ç–æ –≤–æ–ø—Ä–æ—Å</div>",
    "questions": ["–≠—Ç–æ —Ñ–∞–Ω–∞—Ä—Ç –ø–æ –∏–∑–≤–µ—Å—Ç–Ω–æ–º—É –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–æ–º—É –∫–æ–º–∏–∫—Å—É. –ù–∞–∑–æ–≤–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", "<img src=\"https://ibb.co/HgRfTYC\"></img>", "<img src=\"https://i.redd.it/9nhnc6ter3151.jpg\">", "<img src=\"https://assets.amuniversal.com/8b8b6b403ed2013c1aef005056a9545d\"></img>"]
}, {
    "row": 1,
    "column": 0,
    "mark": "\"–º–∞—Ç–µ—à–∞\"",
    "questions": ["–ù–∞–∑–æ–≤–∏—Ç–µ –Ω–∞–∏–º–µ–Ω—å–Ω—à–∏–π –ø–µ—Ä–≤–æ–æ–±—Ä–∞–∑–Ω—ã–π –∫–æ—Ä–µ–Ω—å —á–∏—Å–ª–∞ 998244353"]
}, {
    "row": 1,
    "column": 1,
    "mark": "–Ø–∑—ã–∫–∏ II",
    "questions": ["–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ–ø—É—Å–∫", "https://ibb.co/yy4JjBD"]
}, {
    "row": 1,
    "column": 2,
    "mark": "Kotlinü•∞",
    "questions": ["–ö–∞–∫–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã?", "<img src=\"https://ibb.co/d7LqDcN\"/>"]
}, {
    "row": 2,
    "column": 0,
    "mark": "–û–û–üü§Æ",
}, {
    "row": 2,
    "column": 1,
    "mark": "<span style=\"font-size: 60pt\">ü§î</span>",
}, {
    "row": 2,
    "column": 2,
    "mark": "<img src=\"https://media.tenor.com/x8v1oNUOmg4AAAAd/rickroll-roll.gif\" width=\"100px\"/>",
},
]}


async def broadcast_message(json) -> None:
    await asyncio.gather(
        *[client.send_json(json) for client in clients],
        return_exceptions=False
    )


async def handle_host_message(_ws: web.WebSocketResponse, msg: aiohttp.WSMessage):
    if msg.type == aiohttp.WSMsgType.TEXT:
        data = msg.json()
        assert data["session"]["id"] == "239"

        match data["type"]:
            case "OPEN_QUESTION":
                await broadcast_message({
                    "state": "OPENED_QUESTION",
                    "payload": {
                        "question": {
                            "row": data["payload"]["row"],
                            "column": data["payload"]["column"],
                            "text": "<span style=\"color: blue;\">What is the answer to life, the universe and everything?</span>",
                        },
                        "board": BOARD,
                    },
                })
            case "SET_FIELD":
                await broadcast_message({
                    "state": "MAIN_BOARD",
                    "payload": {
                        "board": BOARD,
                    },
                })
            case _:
                raise ValueError(f"Unknown message type: {data['type']}")


async def handle_board_message(_msg: aiohttp.WSMessage) -> None:
    raise ValueError("We don't accept messages from the board")


async def handle_ws_connection(kind: str, request: web.Request) -> web.WebSocketResponse:
    ws = web.WebSocketResponse()
    await ws.prepare(request)
    clients.add(ws)

    await broadcast_message({
        "state": "MAIN_BOARD",
        "payload": {
            "board": BOARD,
        },
    })

    try:
        async for msg in ws:
            msg: aiohttp.WSMessage
            match kind:
                case "host":
                    await handle_host_message(ws, msg)
                case "board":
                    await handle_board_message(msg)
    finally:
        clients.remove(ws)

    return ws


app = web.Application()
app.add_routes([
    web.post("/api/game-session", create_game_session),
    web.get("/ws/host/239", functools.partial(handle_ws_connection, "host")),
    web.get("/ws/board/239", functools.partial(handle_ws_connection, "board")),
])

web.run_app(app, port=8080)
